//
//  StyleKitName.swift
//  ProjectName
//
//  Created by AuthorName on 6/21/17.
//  Copyright Â© 2017 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKitName : NSObject {

    //// Drawing Methods

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 187), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 187), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 187)

        //// Color Declarations
        let color = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let color2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 103.5, y: 4.5))
        bezierPath.addCurve(to: CGPoint(x: 122.5, y: 14.5), controlPoint1: CGPoint(x: 115.05, y: 4.5), controlPoint2: CGPoint(x: 123.01, y: 14.5))
        bezierPath.addCurve(to: CGPoint(x: 138.5, y: 4.5), controlPoint1: CGPoint(x: 122.01, y: 14.5), controlPoint2: CGPoint(x: 127.08, y: 4.5))
        bezierPath.addCurve(to: CGPoint(x: 156.5, y: 14.5), controlPoint1: CGPoint(x: 150.32, y: 4.5), controlPoint2: CGPoint(x: 156.5, y: 14.5))
        bezierPath.addCurve(to: CGPoint(x: 156.5, y: 43.5), controlPoint1: CGPoint(x: 156.5, y: 14.5), controlPoint2: CGPoint(x: 165, y: 27.25))
        bezierPath.addCurve(to: CGPoint(x: 122.5, y: 79.5), controlPoint1: CGPoint(x: 148, y: 59.75), controlPoint2: CGPoint(x: 122.5, y: 79.5))
        bezierPath.addCurve(to: CGPoint(x: 86.5, y: 43.5), controlPoint1: CGPoint(x: 122.5, y: 79.5), controlPoint2: CGPoint(x: 96.5, y: 59.75))
        bezierPath.addCurve(to: CGPoint(x: 86.5, y: 14.5), controlPoint1: CGPoint(x: 76.5, y: 27.25), controlPoint2: CGPoint(x: 86.5, y: 14.5))
        bezierPath.addCurve(to: CGPoint(x: 103.5, y: 4.5), controlPoint1: CGPoint(x: 86.5, y: 14.5), controlPoint2: CGPoint(x: 92.29, y: 4.5))
        bezierPath.close()
        color.setStroke()
        bezierPath.lineWidth = 6
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        UIColor.gray.setFill()
        bezier2Path.fill()
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        UIColor.black.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 123.5, y: 78.5))
        bezier3Path.addCurve(to: CGPoint(x: 123.5, y: 126.5), controlPoint1: CGPoint(x: 89.5, y: 113.5), controlPoint2: CGPoint(x: 113.5, y: 126.5))
        bezier3Path.addCurve(to: CGPoint(x: 137.5, y: 96.5), controlPoint1: CGPoint(x: 133.5, y: 126.5), controlPoint2: CGPoint(x: 147.5, y: 116.5))
        bezier3Path.addCurve(to: CGPoint(x: 133.72, y: 91.04), controlPoint1: CGPoint(x: 136.42, y: 94.33), controlPoint2: CGPoint(x: 133.72, y: 91.04))
        color2.setStroke()
        bezier3Path.lineWidth = 6
        bezier3Path.lineCapStyle = .round
        bezier3Path.stroke()
        
        context.restoreGState()

    }




    @objc(StyleKitNameResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
